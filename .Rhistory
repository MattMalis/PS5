axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
real_clear_URL<- "http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html"
advantage_cand<- "Trump"
all_tables <- readHTMLTable(real_clear_URL)
libraryj(XML)
library(XML)
all_tables <- readHTMLTable(real_clear_URL)
polls_table <- all_tables[[length(all_tables)]]
polls_table
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
polls_table$split_dates
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
polls_table$end_date
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
polls_table[,5]
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
adv_cand_index
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
polls_table$end_date
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_date
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
polls_table$end_date
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
abline(h=0,col=3,lty=3)
return(polls_table)
rm(real_clear_URL)
rm(advantage_cand)
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_sanders-5565.html", "Trump")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_cruz_vs_clinton-4034.html", "Cruz")
gen_election_plot<- function(real_clear_URL, advantage_cand){
## reading in all tables from specific realclearpolitics.com URL
all_tables <- readHTMLTable(real_clear_URL)
## selecting relevant table (last table on page)
polls_table <- all_tables[[length(all_tables)]]
# splitting date range
polls_table$Date <- as.character(polls_table$Date)
polls_table$split_dates <- strsplit(polls_table$Date, split = " - ")
## storing the date the poll ended as its own variable
for(i in 1:length(polls_table$split_dates)){
polls_table$end_date[i] <- polls_table$split_dates[[i]][2]
}
## changing candidate column names so user can specify a candidate for plotting
## getting rid of "(D)" or "(R)" in column names
colnames(polls_table)[5:6] <- gsub("\\(D\\)", "", colnames(polls_table)[5:6])
colnames(polls_table)[5:6] <- gsub("\\(R\\)", "", colnames(polls_table)[5:6])
## getting rid of space
colnames(polls_table)[5:6] <- gsub(" ", "", colnames(polls_table)[5:6])
## unfactoring candidate poll #s, turning into numerics
polls_table[,5] <- as.numeric(as.character(polls_table[,5]))
polls_table[,6] <- as.numeric(as.character(polls_table[,6]))
## creating poll advantage variable given user's input of which candidate's...
## advantage they want to see
adv_cand_index <- which(colnames(polls_table) == advantage_cand)
other_cand_index <- ifelse(adv_cand_index == 5,6,5)
polls_table$advantage <- polls_table[ , adv_cand_index] - polls_table[ , other_cand_index]
## formatting 'date' for the plot
polls_table$end_date <- gsub("/", "-", polls_table$end_date)
polls_table$end_month <- strsplit(polls_table$end_date, "-" )
for(i in 1:length(polls_table$end_month)){
polls_table$end_month[i] <- polls_table$end_month[[i]][1]
}
## adding year to date in order to change class of variable to "date" class
polls_table$end_date <- ifelse(polls_table$end_month == 1 | polls_table$end_month == 2,
paste0("2016-", polls_table$end_date),
paste0("2015-", polls_table$end_date))
polls_table$end_date <- as.Date(polls_table$end_date)
## creating plot given user's input of candidate's advantage they want to see
plot(polls_table$end_date, polls_table$advantage, xlab = "Month Poll Closed",
ylab = paste0("Advantage of ", advantage_cand), axes = F,
main = paste0("Advantage of ", advantage_cand, " Over ",
colnames(polls_table)[other_cand_index],
" \n in 2015-2016 Polls"))
abline(h=0,col=3,lty=3)
axis.Date(1, at = seq(min(polls_table$end_date), max(polls_table$end_date)+20, "months"))
axis(2, las = 2)
## returning the edited data set
return(polls_table)
}
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_rubio_vs_sanders-5564.html", "Sanders")
gen_election_plot("http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html", "Clinton")
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
sum.plus.2 <- function(x){
sum(x) + 2
}
apply(mat1, 1, sum.plus.2)
apply(mat1, 1, function(x, y) sum(x) + y, y=3)
apply(mat1, 2, function(x, y) sum(x) + y, y=5)
apply(mat1, 2)
mat1.df <- data.frame(mat1)
mat1.df
is.list(mat1.df)
lapply(mat1.df, sum)
y <- lapply(mat1.df, sum)
is.list(y)
names(y)
unlist(lapply(1:5, function(i) 5+i ))
outVec <- NULL
for(i in 1:5){
outVec <- c(outVec, 5+i)
}
outVec
y2 <- sapply(mat1.df, function(x, y) sum(x) + y, y = 5)
y2
is.vector(y2)
is.list(y2)
x1 <- runif(16)
x1
cat1 <- rep(1:4, 4)
cat1
cat2 <- c(rep(1, 8), rep(2, 8))
cat2
mat2.df <- data.frame(x1)
names(mat2.df) <- c("x1")
mat2.df$cat1 <- cat1
mat2.df$cat2 <- cat2
mat2.df
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
outVec <- NULL
for (i in unique(mat2.df$cat1)){
outVec <- c(outVec, mean(mat2.df$x1[mat2.df$cat1==i]))
}
outVec
tapply(mat2.df$x1, list(mat2.df$cat1, mat2.df$cat2), mean)
mean(mat2.df$x1[mat2.df$cat1==1 & mat2.df$cat2==1])
a <- matrix(runif(100, 1, 2),20)
a
a.df <- data.frame(a)
colMeans(a)
a1 <- sweep(a, 2, colMeans(a), "-")
a1
colMeans(a1)
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
mat2.df
byOut <- by(data=mat2.df$x1, INDICES=mat2.df$cat1, mean)
str(byOut)
length(byOut)
is.list(byOut)
is.vector(byOut)
class(byOut)
l <- list(a = 1:10, b = 11:20)
l
?fivenum
l.fivenum <- vapply(X=l, FUN=fivenum, FUN.VALUE=c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
class(l.fivenum)
l.fivenum
replicate(10, rnorm(10))
replicate(10, rnorm(5))
l1 <- list(a = c(1:10), b = c(11:20))
l2 <- list(c = c(21:30), d = c(31:40))
l1
l2
mapply(sum, l1$a, l1$b, l2$c, l2$d)
dd<-data.frame(matrix(rnorm(216),72,3),c(rep("A",24),rep("B",24),rep("C",24)),c(rep("J",36),rep("K",36)))
dd
colnames(dd) <- c("v1", "v2", "v3", "dim1", "dim2")
head(dd)
library(plyr)
obj1 <- ddply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df) mean(df$v1))
obj1
obj2 <- daply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df)mean(df$v1))
obj2 # why are these different?
l_ply(1:100, identity)
llply(1:100, identity)
laply(1:100, identity)
ldply(1:100, identity)
library('doMC')
install.packages("doMC")
library('doMC')
library('doMC')
library('foreach')
myX <- 20
myY <- c(1:100)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=4)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=1)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=2)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
a1<-(runif(20*5*1000), dim=c(20,5,1000))
a1<-array(runif(20*5*1000), dim=c(20,5,1000))
structure(a1)
dim(a1)
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
a0<-(runif(20),dim=(4,5))
a0<-array(runif(20),dim=(4,5))
a0<-array(runif(20), dim=(4,5))
a0<-array(runif(20), dim=(4,5,1))
a0 <-array(runif(20), dim=(4,5))
a8 <-array(runif(20), dim=(4,5))
a0 <-array(runif(20), dim=c(4,5))
a0
b0<-c(3:7)
x<-apply(a0, c(1,3), %*%b0)
x<-apply(a0, c(1,3), function(x) x%*%b0)
x<-apply(a0, c(1,3), function(y) y%*%b0)
b0
x<-apply(a0, 1, function(y) y%*%b0)
b0
a0
x<-apply(a0, 1, function(y) y%*%b0)
x
getwd()
setwd("/Users/iramalis/Desktop/gitstuff/PS5")
rm(list=ls())
############### READING IN AND RE-CODING DATA ##################
library(foreign)
data<-read.dta("anes_timeseries_2012_stata12.dta")
dim(data)
search()
attach(data)
anes<-NULL
## storing variables in new data.frame
anes<-cbind(as.character(caseid), as.character(ft_dpc), as.character(interest_attention),
as.character(interest_following), as.character(gender_respondent_x),
as.character(candrel_dpc), as.character(relig_church),
as.character(relig_churchoft), as.character(ineq_incgap))
anes<-as.data.frame(anes)
detach(data)
##casting variables as numeric or character
anes[,c(1,2)]<-apply(anes[,c(1,2)], 2, function(x){
x<-as.numeric(as.character(x))
})
anes[,-c(1,2)]<-apply(anes[,-c(1,2)], 2, function(x){
x<-as.character(x)
})
str(anes)
## male=1, female=0
anes$male<-ifelse(anes$V5=='1. Male', 1, 0)
## believes Obama is a Muslim = 1, otherwise 0
anes$muslimObama<-ifelse(anes$V6=="04. Muslim", 1,0)
##how often do you pay attention to what's going on in government and politcs?
##  Always = 5, Most of the time = 4, About half the time = 3, Some of the time = 2, Never = 1
anes$attention<-ifelse(anes$V3=="1. Always", 5,
ifelse(anes$V3=="2. Most of the time", 4,
ifelse(anes$V3=="3. About half the time", 3,
ifelse(anes$V3=="4. Some of the time", 2,
ifelse(anes$V3=="5. Never", 1, NA)))))
##how interested are you in political campaigns so far this year?
## Very much interested = 3, Somewhat interested = 2, Not much interested = 1
anes$following<-ifelse(anes$V4=="1. Very much interested", 3,
ifelse(anes$V4=="2. Somewhat interested", 2,
ifelse(anes$V4=="3. Not much interested", 1, NA)))
## referring to binary "relig_church" variable and ordinal "relig_churchoft" variable
##    to distinguish between "no" and non-response from the binary
## do you ever attend religious services?
##  Yes = 1, No = 2
anes$church<-ifelse(anes$V7=="1. Yes", 1,
ifelse(anes$V7=="2. No", 0, NA))
## How often do you attend religious services?
##  Never = 0 (including "Never" response to this question, and "No" response to previous)
##  A few times a year = 1, Once or twice a month = 2, Almost every week = 3, Every week = 4
anes$churchFreq<-ifelse(anes$church== 0, 0,
ifelse(anes$V8=="5. Never", 0,
ifelse(anes$V8=="4. A few times a year", 1,
ifelse(anes$V8=="3. Once or twice a month", 2,
ifelse(anes$V8=="2. Almost every week", 3,
ifelse(anes$V8=="1. Every week", 4, NA))))))
## Do you believe income gap, compared to 20 years ago, is:
##  Larger = 3, About the same = 2, Smaller = 1
anes$incomeGapLarger<- ifelse(anes$V9=="1. Larger", 3,
ifelse(anes$V9=="3. About the same", 2,
ifelse(anes$V9=="2. Smaller", 1, NA)))
## removing uncoded variables, re-naming the first two
names(anes)
anes<-anes[,-c(3:9)]
names(anes)[1:2]<-c("caseID", "thermObama")
str(anes)
## handling NA values for thermObama:
anes$thermObama<-sapply(anes$thermObama, function(x){
ifelse(x<0, NA, x)})
########## ASSIGNING TEST AND CONTROL GROUPS ###########
## assigning random values
anes$random<-0
anes$random<-sapply(anes$random, function(x) {
x<-runif(1)})
summary(anes$random)
## separating into test/training sets: if random > 0.5, test = 1, otherwise test = 0
anes$test<- ifelse(anes$random>0.5, 1, 0)
table(anes$test)
## model1
model1<-lm(thermObama~churchFreq+muslimObama+attention+male+incomeGapLarger, data=anes[anes$test==0,])
summary(model1)
## model2
model2<-lm(thermObama~churchFreq+muslimObama, data=anes[anes$test==0,])
summary(model2)
# model3
model3<-lm(thermObama~following+male+incomeGapLarger, data=anes[anes$test==0,])
summary(model3)
########## PREDICTED DATA #################
predict1<-array(as.numeric(predict(model1, anes[anes$test==1,])))
summary(predict1)
summary(anes$thermObama)
predict2<-array(as.numeric(predict(model2, anes[anes$test==1,])))
summary(predict2)
predict3<-array(as.numeric(predict(model3, anes[anes$test==1,])))
summary(predict3)
predictions<-as.matrix(cbind(predict1, predict2, predict3))
observed<-anes$thermObama[anes$test==1]
length(observed)
dim(predictions)
nrow(anes)
testThis<-rep(NA, 5914)
table(testThis)
head(testThis)
length(testThis)
testThis<-<-sapply(testThis, function(x) {
testThis<-sapply(testThis, function(x) {
x<-runif(1)})
head(testThis)
summary(testThis)
testThat<-ifelse(testThis>0.5, 1, 0)
table(testThat)
RMSE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(sqrt(mean(errors^2, na.rm=T)))
}
MAD <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(median(errors, na.rm=TRUE))
}
RMSLE <- function (preds=predictions, obs=observed, model=1) {
hold<-log(preds[,model]+1)-log(obs+1)
return(sqrt(mean(hold^2, na.rm=T)))
}
MAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs*100  ## some values in obs are 0...so errors/obs would be Inf in those cases
return(mean(percentErrors[percentErrors!=Inf], na.rm=TRUE)) ## removing those values from the MAPE calculation
}
MEAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs *100  ## some values in obs are 0...so errors/obs would be Inf in those cases
return(median(percentErrors[percentErrors!=Inf], na.rm=TRUE))  ## removing those values from the MAPE calculation
}
fitStatistics<-function(preds=predictions, obs=observed,
findRMSE=T, findMAD=T, findRMSLE=T, findMAPE=T, findMEAPE=T){
fitStatValues<-matrix(nrow=3)
statNames<-(NULL)
if (findRMSE){
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
fitStatValues<-cbind(fitStatValues, (statRMSE))
statNames<-c(statNames, "RMSE")
}
if (findMAD){
statMAD<-sapply(1:3, function(x) MAD(model=x))
fitStatValues<-cbind(fitStatValues, (statMAD))
statNames<-c(statNames, "MAD")
}
if (findRMSLE){
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
fitStatValues<-cbind(fitStatValues, (statRMSLE))
statNames<-c(statNames, "RMSLE")
}
if (findMAPE){
statMAPE<-sapply(1:3, function(x) MAPE(model=x))
fitStatValues<-cbind(fitStatValues, (statMAPE))
statNames<-c(statNames, "MAPE")
}
if (findMEAPE){
statMEAPE<-sapply(1:3, function(x) MEAPE(model=x))
fitStatValues<-cbind(fitStatValues, statMEAPE)
statNames<-c(statNames, "MEAPE")
}
fitStatValues<-fitStatValues[,-1]
colnames(fitStatValues)<-statNames
rownames(fitStatValues)<-c("Model1", "Model2", "Model3")
return(fitStatValues)
}
fitStatistics()
fakePreds<-matrix(ncol=3, seq(1:3000))
fakeObs<-matrix(ncol=1, seq(1000:1))
fitStatistics(fakePreds, fakeObs, findRMSLE = F)
fitStatistics(pred=fakePreds, obs=fakeObs, findRMSLE = F)
fitStatistics<-function(preds=predictions, obs=observed,
findRMSE=T, findMAD=T, findRMSLE=T, findMAPE=T, findMEAPE=T){
fitStatValues<-matrix(nrow=3)
statNames<-(NULL)
if (findRMSE){
statRMSE<-sapply(1:3, function(x) RMSE(preds=preds, obs=obs, model=x))
fitStatValues<-cbind(fitStatValues, (statRMSE))
statNames<-c(statNames, "RMSE")
}
if (findMAD){
statMAD<-sapply(1:3, function(x) MAD(preds=preds, obs=obs, model=x))
fitStatValues<-cbind(fitStatValues, (statMAD))
statNames<-c(statNames, "MAD")
}
if (findRMSLE){
statRMSLE<-sapply(1:3, function(x) RMSLE(preds=preds, obs=obs, model=x))
fitStatValues<-cbind(fitStatValues, (statRMSLE))
statNames<-c(statNames, "RMSLE")
}
if (findMAPE){
statMAPE<-sapply(1:3, function(x) MAPE(preds=preds, obs=obs, model=x))
fitStatValues<-cbind(fitStatValues, (statMAPE))
statNames<-c(statNames, "MAPE")
}
if (findMEAPE){
statMEAPE<-sapply(1:3, function(x) MEAPE(preds=preds, obs=obs, model=x))
fitStatValues<-cbind(fitStatValues, statMEAPE)
statNames<-c(statNames, "MEAPE")
}
fitStatValues<-fitStatValues[,-1]
colnames(fitStatValues)<-statNames
rownames(fitStatValues)<-c("Model1", "Model2", "Model3")
return(fitStatValues)
}
fitStatistics()
fitStatistics(pred=fakePreds, obs=fakeObs, findRMSLE = F)
