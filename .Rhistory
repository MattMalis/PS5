outVec
tapply(mat2.df$x1, list(mat2.df$cat1, mat2.df$cat2), mean)
mean(mat2.df$x1[mat2.df$cat1==1 & mat2.df$cat2==1])
a <- matrix(runif(100, 1, 2),20)
a
a.df <- data.frame(a)
colMeans(a)
a1 <- sweep(a, 2, colMeans(a), "-")
a1
colMeans(a1)
tapply(mat2.df$x1, INDEX = mat2.df$cat1, FUN=mean)
mat2.df
byOut <- by(data=mat2.df$x1, INDICES=mat2.df$cat1, mean)
str(byOut)
length(byOut)
is.list(byOut)
is.vector(byOut)
class(byOut)
l <- list(a = 1:10, b = 11:20)
l
?fivenum
l.fivenum <- vapply(X=l, FUN=fivenum, FUN.VALUE=c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
class(l.fivenum)
l.fivenum
replicate(10, rnorm(10))
replicate(10, rnorm(5))
l1 <- list(a = c(1:10), b = c(11:20))
l2 <- list(c = c(21:30), d = c(31:40))
l1
l2
mapply(sum, l1$a, l1$b, l2$c, l2$d)
dd<-data.frame(matrix(rnorm(216),72,3),c(rep("A",24),rep("B",24),rep("C",24)),c(rep("J",36),rep("K",36)))
dd
colnames(dd) <- c("v1", "v2", "v3", "dim1", "dim2")
head(dd)
library(plyr)
obj1 <- ddply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df) mean(df$v1))
obj1
obj2 <- daply(.data=dd, .variables=c("dim1","dim2"), .fun=function(df)mean(df$v1))
obj2 # why are these different?
l_ply(1:100, identity)
llply(1:100, identity)
laply(1:100, identity)
ldply(1:100, identity)
library('doMC')
install.packages("doMC")
library('doMC')
library('doMC')
library('foreach')
myX <- 20
myY <- c(1:100)
myFunction <- function(x,y){
for(i in 1:100000){
2+2
}
return(x+y)
}
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out <- laply(myY, myFunction, x=myX))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=4)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=1)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=2)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
registerDoMC(cores=8)
system.time(out2 <- laply(myY, myFunction, x=myX, .parallel=TRUE))
a1<-(runif(20*5*1000), dim=c(20,5,1000))
a1<-array(runif(20*5*1000), dim=c(20,5,1000))
structure(a1)
dim(a1)
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
a0<-(runif(20),dim=(4,5))
a0<-array(runif(20),dim=(4,5))
a0<-array(runif(20), dim=(4,5))
a0<-array(runif(20), dim=(4,5,1))
a0 <-array(runif(20), dim=(4,5))
a8 <-array(runif(20), dim=(4,5))
a0 <-array(runif(20), dim=c(4,5))
a0
b0<-c(3:7)
x<-apply(a0, c(1,3), %*%b0)
x<-apply(a0, c(1,3), function(x) x%*%b0)
x<-apply(a0, c(1,3), function(y) y%*%b0)
b0
x<-apply(a0, 1, function(y) y%*%b0)
b0
a0
x<-apply(a0, 1, function(y) y%*%b0)
x
getwd()
setwd("/Users/iramalis/Desktop/gitstuff/PS5")
rm(list=ls())
search()
library(foreign)
data<-read.dta("anes_timeseries_2012_stata12.dta")
attach(data)
anes<-NULL
## storing variables in new data.frame
anes<-cbind(as.character(caseid), as.character(ft_dpc), as.character(interest_attention),
as.character(interest_following), as.character(gender_respondent_x),
as.character(candrel_dpc), as.character(relig_church),
as.character(relig_churchoft), as.character(ineq_incgap))
anes<-as.data.frame(anes)
detach(data)
##casting variables as numeric or character
anes[,c(1,2)]<-apply(anes[,c(1,2)], 2, function(x){
x<-as.numeric(as.character(x))
})
anes[,-c(1,2)]<-apply(anes[,-c(1,2)], 2, function(x){
x<-as.character(x)
})
str(anes)
## recoding: all "Don't Know" or "Refused" coded as NA
## male=1, female=0
anes$male<-ifelse(anes$V5=='1. Male', 1, 0)
## believes Obama is a Muslim = 1, otherwise 0
anes$muslimObama<-ifelse(anes$V6=="04. Muslim", 1,0)
##how often do you pay attention to what's going on in government and politcs?
##  Always = 5, Most of the time = 4, About half the time = 3, Some of the time = 2, Never = 1
anes$attention<-ifelse(anes$V3=="1. Always", 5,
ifelse(anes$V3=="2. Most of the time", 4,
ifelse(anes$V3=="3. About half the time", 3,
ifelse(anes$V3=="4. Some of the time", 2,
ifelse(anes$V3=="5. Never", 1, NA)))))
##how interested are you in political campaigns so far this year?
## Very much interested = 3, Somewhat interested = 2, Not much interested = 1
anes$following<-ifelse(anes$V4=="1. Very much interested", 3,
ifelse(anes$V4=="2. Somewhat interested", 2,
ifelse(anes$V4=="3. Not much interested", 1, NA)))
## referring to binary "relig_church" variable and ordinal "relig_churchoft" variable
##    to distinguish between "no" and non-response from the binary
## do you ever attend religious services?
##  Yes = 1, No = 2
anes$church<-ifelse(anes$V7=="1. Yes", 1,
ifelse(anes$V7=="2. No", 0, NA))
## How often do you attend religious services?
##  Never = 0 (including "Never" response to this question, and "No" response to previous)
##  A few times a year = 1, Once or twice a month = 2, Almost every week = 3, Every week = 4
anes$churchFreq<-ifelse(anes$church== 0, 0,
ifelse(anes$V8=="5. Never", 0,
ifelse(anes$V8=="4. A few times a year", 1,
ifelse(anes$V8=="3. Once or twice a month", 2,
ifelse(anes$V8=="2. Almost every week", 3,
ifelse(anes$V8=="1. Every week", 4, NA))))))
## Do you believe income gap, compared to 20 years ago, is:
##  Larger = 3, About the same = 2, Smaller = 1
anes$incomeGapLarger<- ifelse(anes$V9=="1. Larger", 3,
ifelse(anes$V9=="3. About the same", 2,
ifelse(anes$V9=="2. Smaller", 1, NA)))
## removing uncoded variables, re-naming the first two
names(anes)
anes<-anes[,-c(3:9)]
names(anes)[1:2]<-c("caseID", "thermObama")
str(anes)
anes$thermObama2<-apply(anes$thermObama, 1, function(x){ if(x<0){x<-NA}})
anes$thermObama2<-apply(anes$thermObama, 1, function(x){
if(x<0){
x<-NA}})
anes$thermObama2<-apply(anes$thermObama, 1, function(x){
ifelse(x<0, x<-NA, x<-x)})
?apply
?lapply
anes$thermObama2<-sapply(anes$thermObama, function(x){
ifelse(x<0, NA, x)})
table(anes$thermObama2)
table(anes$thermObama)
anes$thermObama<-sapply(anes$thermObama, function(x){
ifelse(x<0, NA, x)})
table(anes$thermObama)
anes$random<-0
anes$random<-sapply(anes$random, function(x) {
x<-runif(1)})
summary(anes$random)
## separating into test/training sets: if random > 0.5, test = 1, otherwise test = 0
anes$test<- ifelse(anes$random>0.5, 1, 0)
table(anes$test)
model1<-lm(thermObama~churchFreq+muslimObama+attention+male+incomeGapLarger, data=anes[anes$test==0,])
summary(model1)
model2<-lm(thermObama~churchFreq+muslimObama, data=anes[anes$test==0,])
summary(model2)
model3<-lm(thermObama~following+male+incomeGapLarger, data=anes[anes$test==0,])
summary(model3)
predict1<-predict.lm(model1, anes[anes$test==1,])
summary(predict1)
summary(anes$thermObama)
predict1<-predict(model1, anes[anes$test==1,])
summary(predict1)
summary(anes$thermObama)
predict2<-predict(model2, anes[anes$test==1,])
summary(predict2)
predict3<-predict(model3, anes[anes$test==1,])
summary(predict3)
length(predict3)
length(anes[anes$test==1,])
anes[anes$test==1,]
nrow(anes[anes$test==1,])
length(predict3)
predicted<-matrix(Pred1<-predict1, Pred2<-predict2, Pred3<-predict3, Observed<-anes$thermObama[anes$test==1,])
predicted<-data.frame(Pred1<-predict1, Pred2<-predict2, Pred3<-predict3, Observed<-anes$thermObama[anes$test==1,])
predicted<-data.frame("Pred1"<-predict1, "Pred2"<-predict2)#, Pred3<-predict3, Observed<-anes$thermObama[anes$test==1,])
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2), "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1,])
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1,])
predicted<-data.frame("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1,])
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1])
length(predict1)
length(predict2)
length(predict3)
length(anes$thermObama[anes$test==1])
predicted<-NULL
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1])
predicted
predicted<-matrix(rep(NA, 2921*4), ncol = 4)
predicted
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1])
predict1
str(predict1)
class(predict1)
predict1<-array(as.numeric(predict1))
predict1
predict2<-array(as.numeric(predict(model2, anes[anes$test==1,])))
summary(predict2)
predict3<-array(as.numeric(predict(model3, anes[anes$test==1,])))
summary(predict3)
length(anes$thermObama[anes$test==1])
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1])
predicted<-matrix(rep(NA, 2921*4), ncol = 4)
predicted<-matrix("Pred1"<-predict1, "Pred2"<-predict2, "Pred3"<-predict3, "Observed"<-anes$thermObama[anes$test==1])
predicted<-matrix(predict1, predict2, predict3, anes$thermObama[anes$test==1])
predicted<-matrix(rep(NA, 2921*4), ncol = 4)
predicted<-cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1])
dim(predicted)
names(predicted)
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
str(predicted)
class(predicted)
predicted<-NULL
predicted<-cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1])
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
class(predicted)
?abs
errors<-sapply(predicted, function(x) abs(Pred1-Observed))
errors
errors<-sapply(predicted, function(x) abs(x$Pred1-x$Observed))
errors<-apply(predicted, 2, function(x) abs(x-predicted$Observed))
class(predicted)
summary(predicted$Observed)
head(predicted$Observed)
head(predicted)
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
head(predicted)
predicted<-NULL
predicted<-matrix(cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1]))
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
head(predicted)
dim(predicted)
predicted<-NULL
predicted<-matrix(cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1]))
dim(predicted)
predicted<-NULL
predicted<-as.matrix(cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1]))
dim(predicted)
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
head(predicted)
names(predicted)
head(predicted)
colnames(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
head(predicted)
errors<-apply(predicted, 2, function(x) abs(x-predicted$Observed))
errors<-sapply(predicted, function(x) abs(x-predicted$Observed))
head(predicted)
head(predicted$Observed)
predicted<-NULL
predicted<-as.data.frame(cbind(predict1, predict2, predict3, anes$thermObama[anes$test==1]))
names(predicted)<-c("Pred1", "Pred2", "Pred3", "Observed")
head(predicted$Observed)
head(predicted)
errors<-apply(predicted, 2, function(x) abs(x-predicted$Observed))
head(errors)
rm(errors)
RMSE <- function (predObs) {
errors<-apply(predObs, 2, function(x) abs(x-predObs$Observed))
}
head(predicted)
RMSE <- function (predObs) {
errors<-apply(predObs, 2, function(x) abs(x-predObs$Observed))
print(head(errors))
}
RMSE(predicted)
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-predObs$Observed)
print(head(errors))
}
RMSE(predicted)
RMSE(predicted, 3)
predictions<-NULL
predictions<-as.matrix(cbind(predict1, predict2, predict3))
head(predictions)
observed<-anes$thermObama[anes$test==1]
length(observed)
length(predictions)
dim(predictions)
dim(observed)
class(observed)
nrow(observed)
length(observed)
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
}
RMSE(predicted, 3)
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
return(sqrt(sum(errors^2)/length(errors)))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
errors2<-sum(errors^2)
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
#errors2<-sum(errors^2)
print(errors)
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
#errors2<-sum(errors^2)
print(errors^2)
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
#errors2<-sum(errors^2)
print(sum(errors^2))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
#errors2<-sum(errors^2)
print(mean(errors^2))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
#errors2<-sum(errors^2)
print(mean(as.vector(errors^2)))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
errors2<-mean(errors^2)
#print(mean(as.vector(errors^2)))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
errors2<-mean(errors^2)
#print(mean(as.vector(errors^2)))
print(head(errors))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
errors2<-mean(errors^2)
#print(mean(as.vector(errors^2)))
print(head(errors))
print(head(errors2))
}
print(RMSE(predicted, 3))
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
errors2<-(errors^2)
}
print(RMSE(predicted, 3))
class(RMSE(predicted, 3))
is.vector(RMSE(predicted, 3))
mean(RMSE(predicted, 3))
mean(as.vector(RMSE(predicted, 3)))
head(as.vector(RMSE(predicted, 3)))
?mean
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
return(sqrt(mean(errors^2), na.rm=T))
}
RMSE(predicted, 3)
RMSE <- function (predObs, model=1) {
errors<-abs(predObs[,model]-observed)
return(sqrt(mean(errors^2, na.rm=T)))
}
RMSE(predicted, 3)
RMSE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(predObs[,model]-observed)
return(sqrt(mean(errors^2, na.rm=T)))
}
RMSE
print(RMSE)
print(RMSE())
RMSE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(sqrt(mean(errors^2, na.rm=T)))
}
print(RMSE())
print(RMSE(model=2))
print(RMSE(model=3))
MAD <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(med(errors))
}
MAD()
MAD <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(median(errors))
}
MAD()
MAD <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
return(median(errors, na.rm=TRUE))
}
MAD()
MAD(model=3)
MAD(model=2)
MAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs
return(median(percentErrors, na.rm=TRUE))
}
MAPE()
MAPE(model=2)
MAPE(model=3)
MAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs
return(mean(percentErrors, na.rm=TRUE))
}
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statRMSE
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statMAD<-sapply(1:3, function(x) MAD(model=x))
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
statMAPE<-sapply(1:3, function(x) MAPE(model=x))
statMEAPE<-sapply(1:3, function(x) MEAPE(model=x))
MAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs
return(mean(percentErrors, na.rm=TRUE))
}
MEAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs
return(median(percentErrors, na.rm=TRUE))
}
?ln
?log
exp(1)
hold<-log(preds[,model]+1)-log(obs+1)
RMSLE <- function (preds=predictions, obs=observed, model=1) {
hold<-log(preds[,model]+1)-log(obs+1)
return(sqrt(mean(hold^2, na.rm=true)))
}
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statMAD<-sapply(1:3, function(x) MAD(model=x))
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
RMSLE <- function (preds=predictions, obs=observed, model=1) {
hold<-log(preds[,model]+1)-log(obs+1)
return(sqrt(mean(hold^2, na.rm=T)))
}
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statMAD<-sapply(1:3, function(x) MAD(model=x))
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
statMAPE<-sapply(1:3, function(x) MAPE(model=x))
statMEAPE<-sapply(1:3, function(x) MEAPE(model=x))
fitStats<-matrix(cbind(statRMSE, statMAD, statRMSLE, statMAPE, statMEAPE)
)
fitStats
fitStats<-as.matrix(t(rbind(statRMSE, statMAD, statRMSLE, statMAPE, statMEAPE)))
fitStats
MAPE()
MAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs*100
return(mean(percentErrors[percentErrors!=Inf], na.rm=TRUE))
}
MAPE()
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statMAD<-sapply(1:3, function(x) MAD(model=x))
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
statMAPE<-sapply(1:3, function(x) MAPE(model=x))
statMEAPE<-sapply(1:3, function(x) MEAPE(model=x))
fitStats<-as.matrix(t(rbind(statRMSE, statMAD, statRMSLE, statMAPE, statMEAPE)))
MEAPE <- function (preds=predictions, obs=observed, model=1) {
errors<-abs(preds[,model]-obs)
percentErrors<-errors/obs *100
return(median(percentErrors, na.rm=TRUE))
}
statRMSE<-sapply(1:3, function(x) RMSE(model=x))
statMAD<-sapply(1:3, function(x) MAD(model=x))
statRMSLE<-sapply(1:3, function(x) RMSLE(model=x))
statMAPE<-sapply(1:3, function(x) MAPE(model=x))
statMEAPE<-sapply(1:3, function(x) MEAPE(model=x))
fitStats<-as.matrix(t(rbind(statRMSE, statMAD, statRMSLE, statMAPE, statMEAPE)))
fitStats
